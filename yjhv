#include <string>
#include <iostream>
using namespace std;

struct STR {
	int index = 0;
	long long int value = 0;
	string name = "";
	STR* next = nullptr;
};

struct box {
	int lenght = 0;
	STR head;
};

long long int correct_enter_lli() {
	long long int value;
	int flag1;
	int flag2 = 0;
	do {
		if (flag2 == 1)
		{
			cout << endl;
			cout << "Enter correct number!" << endl;
		}
		flag1 = 0;
		cin >> value;
		if (!cin.good() || cin.peek() != '\n') //  Проверка на отсутствие ошибок ввод-вывода
		{
			flag1 = 1;
			cin.clear();    //  Очищает флаги состояния, связанные с потоком
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			flag2 = 1;
			continue;
		}
		flag2 = 1;
	} while (flag1 == 1);
	return value;
}

int correct_enter_int() {
	int num;
	int flag1;
	int flag2 = 0;
	do {
		if (flag2 == 1)
		{
			cout << endl;
			cout << "Enter correct number!" << endl;
		}
		flag1 = 0;
		cin >> num;
		if (!cin.good() || cin.peek() != '\n') 
		{
			flag1 = 1;
			cin.clear();   
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			flag2 = 1;
			continue;
		}
		flag2 = 1;
	} while (flag1 == 1);
	return num;
}

string correct_enter_str() {
	string name;
	int flag1;
	int flag2 = 0;
	do {
		if (flag2 == 1)
		{
			cout << endl;
			cout << "Enter correct name!" << endl;
		}
		flag1 = 0;
		cin >> name;
		if (!cin.good() || cin.peek() != '\n') //  Проверка на отсутствие ошибок ввод-вывода
		{
			flag1 = 1;
			cin.clear();    //  Очищает флаги состояния, связанные с потоком
			cin.ignore(numeric_limits<streamsize>::max(), '\n');
			flag2 = 1;
			continue;
		}
		flag2 = 1;
	} while (flag1 == 1);
	return name;
}

void append(box* mass) {
	long long int value;
	string name;
	cout << "Enter name: ";
	name = correct_enter_str();
	cout << "Enter telephone numbers: ";
	value = correct_enter_lli();
	cout << endl;
	if (mass->lenght == 0) {
		mass->head.index = 0;
		mass->head.value = value;
		mass->head.name = name;
		mass->head.next = nullptr;
	}
	else {
		STR* tmp = &(mass->head);
		while (tmp->next != nullptr) {
			tmp = tmp->next;
		}
		tmp->next = new STR;
		STR* newstr = tmp->next;
		newstr->index = tmp->index + 1;
		newstr->value = value;
		newstr->name = name;
		newstr->next = nullptr;
	}
	(*mass).lenght++;
}

void show(box mass) {
	for (STR* tmp = &(mass).head;tmp != nullptr;tmp = tmp->next) {
		cout << "Index : " << tmp->index +1 << "  _____ " << " Name : " << tmp->name << "  _____ " << " Value :" << tmp->value << endl;
	}
	cout << endl;
}

void ascending(box* mass) {
	for (STR* tmp = &(mass->head); tmp->next != nullptr; tmp = tmp->next) {
		for (STR* newstr = &(mass->head); newstr->next != nullptr; newstr = newstr->next) {
			if (newstr->value > newstr->next->value) {
				int m = newstr->value;
				newstr->value = newstr->next->value;
				newstr->next->value = m;
				string Name = newstr->name;
				newstr->name = newstr->next->name;
				newstr->next->name = Name;
			}
		}
	}
}

void descending(box* mass) {
	for (STR* tmp = &(mass->head); tmp->next != nullptr; tmp = tmp->next) {
		for (STR* newstr = &(mass->head); newstr->next != nullptr; newstr = newstr->next) {
			if (newstr->value < newstr->next->value) {
				int m = newstr->value;
				newstr->value = newstr->next->value;
				newstr->next->value = m;
				string Name = newstr->name;
				newstr->name = newstr->next->name;
				newstr->next->name = Name;
			}
		}
	}
}

void alphabet(box* mass) {
	for (STR* tmp = &(mass->head); tmp->next != nullptr; tmp = tmp->next) {
		for (STR* newstr = &(mass->head); newstr->next != nullptr; newstr = newstr->next) {
			if (newstr->name > newstr->next->name) {
				string Name = newstr->name;
				newstr->name = newstr->next->name;
				newstr->next->name = Name;
				int m = newstr->value;
				newstr->value = newstr->next->value;
				newstr->next->value = m;
			}
		}
	}
}

void reversealph(box* mass) {
	for (STR* tmp = &(mass->head); tmp->next != nullptr; tmp = tmp->next) {
		for (STR* newstr = &(mass->head); newstr->next != nullptr; newstr = newstr->next) {
			if (newstr->name < newstr->next->name) {
				string Name = newstr->name;
				newstr->name = newstr->next->name;
				newstr->next->name = Name;
				int m = newstr->value;
				newstr->value = newstr->next->value;
				newstr->next->value = m;
			}
		}
	}
}

void sort(box* mass) {
	int Sort;
	string answer = "No";
	do {
		cout << "Choose sorting: " << endl;
		cout << "Enter 1 to sort in ascending order" << endl; // по возрастанию
		cout << "Enter 2 to sort in descending order" << endl; // по убыванию
		cout << "Enter 3 to sort in alphabet order" << endl; // в алфавитном порядке
		cout << "Enter 4 to sort in reverse alphabet order" << endl; // в обратном алфавитном порядке
		cout << "Enter: ";
		cin >> Sort;
		cout << endl;
		switch (Sort) {
		case 1:
			ascending(mass);
			break;
		case 2:
			descending(mass);
			break;
		case 3:
			alphabet(mass);
			break;
		case 4:
			reversealph(mass);
			break;
		}
		show(*mass);
		cout << "Do you want to use another sorting?" << endl;
		cout << "Enter Yes or No: ";
		cin >> answer;
		cout << endl;
	} while (answer == "yes");
}

int main()
{
	box head{};
	int num;
	cout << "Enter number of telephone numbers: ";
	num = correct_enter_int();
	cout << endl;
	for (int i = 0; i < num; i++) {
		append(&head);
	}
	sort(&head);
	return 0;
}
